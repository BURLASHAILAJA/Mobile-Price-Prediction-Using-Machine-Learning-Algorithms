# -*- coding: utf-8 -*-
"""mobile price prediction using machine learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGG-5uWR_rzxw5fybpOufv2InrKctmB_
"""

import pandas as pd
import matplotlib.pyplot as plt



data_train=pd.read_csv(r'/content/train (1).csv')
data_test=pd.read_csv(r'/content/test (1).csv')

data_test

data_test



"""# Explortory Data Analysis"""

data_train.info()

data_train.shape

data_test.shape

data_test.info()

data_train.describe()

data_train.plot(x='price_range',y='ram',kind='scatter')

data_train.plot(x='battery_power',y='ram',kind='scatter')

data_train.plot(x='price_range',y='battery_power',kind='scatter')

data_train.isnull().sum()

data_train.plot(kind='box',figsize=(20,10))







"""# *Training



"""

from sklearn.preprocessing import StandardScaler
std=StandardScaler()

x=data_train.drop('price_range',axis=1)

x

y=data_train['price_range']

y

x_std=std.fit_transform(x)
data_test_std=std.transform(data_test)

data_test=data_test.drop('id',axis=1)

data_test.head()

x_std

data_test.head()

data_test_std

"""training model

## Decision Tree
"""

from sklearn.tree import DecisionTreeClassifier
df=DecisionTreeClassifier()

df.fit(x_std,y)

len(df.predict(data_test_std))

df.predict(data_test_std)

df.score(x_std,y)

"""# KNN"""

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier()

knn.fit(x_std,y)

knn.predict(data_test_std)

"""# Logistic Regression"""

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()

lr.fit(x_std,y)

lr.predict(data_test_std)

"""## Our Project Completed

Going deep into the project
"""

from sklearn.model_selection import train_test_split

x_train,y_train,x_test,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

x_train

x_test

y_train

y_test



"""#1) DECISION TREE"""

from sklearn.tree import DecisionTreeClassifier
df=DecisionTreeClassifier()

df.fit(x_train,x_test)

df.fit(x_train,y_train)

x_train

df.fit(x_train,y_train)

